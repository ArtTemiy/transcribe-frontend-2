import { useState } from 'react';
import { Button } from 'react-bootstrap';
import { useUserInfoQuery } from '@/queries/userInfo';

const MockServerControls = () => {
  const [mocksEnabled, setMocksEnabled] = useState(
    localStorage.getItem('enableMocks') === 'true'
  );

  const { data: userInfo, refetch: refetchUser } = useUserInfoQuery();

  const toggleMocks = () => {
    const newValue = !mocksEnabled;
    localStorage.setItem('enableMocks', newValue.toString());
    setMocksEnabled(newValue);
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏
    if (confirm('–î–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É. –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–µ–π—á–∞—Å?')) {
      window.location.reload();
    }
  };

  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –≤ development —Ä–µ–∂–∏–º–µ
  if (import.meta.env.PROD) {
    return null;
  }

  return (
    <div style={{
      position: 'fixed',
      bottom: '20px',
      right: '20px',
      background: '#f8f9fa',
      border: '1px solid #dee2e6',
      borderRadius: '8px',
      padding: '16px',
      boxShadow: '0 2px 10px rgba(0,0,0,0.1)',
      zIndex: 1000,
      minWidth: '300px'
    }}>
      <h6 style={{ margin: '0 0 12px 0', color: '#495057' }}>
        üõ†Ô∏è Dev Tools - –ú–æ–∫ –°–µ—Ä–≤–µ—Ä
      </h6>
      
      <div style={{ marginBottom: '12px' }}>
        <strong>–°—Ç–∞—Ç—É—Å:</strong>{' '}
        <span style={{ 
          color: mocksEnabled ? '#28a745' : '#dc3545',
          fontWeight: 'bold'
        }}>
          {mocksEnabled ? '‚úÖ –í–∫–ª—é—á–µ–Ω' : '‚ùå –û—Ç–∫–ª—é—á–µ–Ω'}
        </span>
      </div>

      <div style={{ marginBottom: '12px', fontSize: '14px' }}>
        <div><strong>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</strong> {userInfo?.planKey || '–ó–∞–≥—Ä—É–∑–∫–∞...'}</div>
        <div><strong>–°—Ç—Ä–∞–Ω–∏—Ü:</strong> {userInfo?.pagesCount || '–ó–∞–≥—Ä—É–∑–∫–∞...'}</div>
      </div>

      <div style={{ display: 'flex', gap: '8px', flexWrap: 'wrap' }}>
        <Button 
          size="sm" 
          variant={mocksEnabled ? 'danger' : 'success'}
          onClick={toggleMocks}
        >
          {mocksEnabled ? '–û—Ç–∫–ª—é—á–∏—Ç—å –º–æ–∫–∏' : '–í–∫–ª—é—á–∏—Ç—å –º–æ–∫–∏'}
        </Button>
        
        <Button 
          size="sm" 
          variant="outline-primary"
          onClick={() => {
            refetchUser();
          }}
        >
          –û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ
        </Button>
      </div>

      <div style={{ marginTop: '8px', fontSize: '12px', color: '#6c757d' }}>
        –≠—Ç–æ—Ç –±–ª–æ–∫ –≤–∏–¥–µ–Ω —Ç–æ–ª—å–∫–æ –≤ development —Ä–µ–∂–∏–º–µ
      </div>
    </div>
  );
};

export default MockServerControls;